"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([[64727],{15680:(e,n,r)=>{r.d(n,{xA:()=>c,yg:()=>f});var t=r(296540);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var d=t.createContext({}),l=function(e){var n=t.useContext(d),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},c=function(e){var n=l(e.components);return t.createElement(d.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,a=e.originalType,d=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(r),m=i,f=u["".concat(d,".").concat(m)]||u[m]||p[m]||a;return r?t.createElement(f,o(o({ref:n},c),{},{components:r})):t.createElement(f,o({ref:n},c))}));function f(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=m;var s={};for(var d in n)hasOwnProperty.call(n,d)&&(s[d]=n[d]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=r[l];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},570221:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var t=r(58168),i=(r(296540),r(15680));const a={title:"Index Overview",language:"en"},o=void 0,s={unversionedId:"table-design/index/index-overview",id:"version-2.0/table-design/index/index-overview",title:"Index Overview",description:"\x3c!--",source:"@site/versioned_docs/version-2.0/table-design/index/index-overview.md",sourceDirName:"table-design/index",slug:"/table-design/index/index-overview",permalink:"/docs/2.0/table-design/index/index-overview",draft:!1,tags:[],version:"2.0",frontMatter:{title:"Index Overview",language:"en"},sidebar:"docs",previous:{title:"Cold Hot Separation",permalink:"/docs/2.0/table-design/cold-hot-separation"},next:{title:"Sort Key and Prefix Index",permalink:"/docs/2.0/table-design/index/prefix-index"}},d={},l=[{value:"Built-in smart indexes",id:"built-in-smart-indexes",level:3},{value:"User-created secondary indexes",id:"user-created-secondary-indexes",level:3}],c={toc:l},u="wrapper";function p(e){let{components:n,...r}=e;return(0,i.yg)(u,(0,t.A)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"Indexes are used to help quickly filter or search for data. Currently, Doris supports two types of indexes: built-in smart indexes and user-created secondary indexes."),(0,i.yg)("h3",{id:"built-in-smart-indexes"},"Built-in smart indexes"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Sorted keys and prefix index: Apache Doris stores data in an ordered manner based on sorted keys. It creates a prefix index for every 1024 rows of data. The key in the index is the value of the sorted column in the first row of the current 1024-row group. If a query involves a sorted column, the system will find the first row of the relevant 1024-row group and start scanning from there."),(0,i.yg)("li",{parentName:"ul"},"ZoneMap index: The ZoneMap index is automatically maintained index information for each column in the column-based storage format, including Min/Max values, etc. This type of index is transparent to users. These are segment and page-level indexes, the maximum and minimum values for each column within a page are recorded, and the maximum and minimum values for each column within a segment are also recorded. Therefore, in equivalence and range queries,  this Min/Max index can be used to narrow down the filtering range.")),(0,i.yg)("h3",{id:"user-created-secondary-indexes"},"User-created secondary indexes"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Bloom Filter Index"),(0,i.yg)("li",{parentName:"ul"},"N-Gram Bloom Filter Index"),(0,i.yg)("li",{parentName:"ul"},"Bitmap Index"),(0,i.yg)("li",{parentName:"ul"},"Inverted Index")))}p.isMDXComponent=!0}}]);